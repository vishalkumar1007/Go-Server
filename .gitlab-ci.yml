# .gitlab-ci.yml
# GitLab CI Pipeline that triggers GitHub Actions workflows & monitors log

stages:
  - build
  - test
  - deploy-dev
  - deploy-qa
  - deploy-prod
  - deploy-next

variables:
  GO_VERSION: "1.21"
  GITHUB_REPO: "vishalkumar1007/Go-Server"
  GITLAB_PROJECT_ID: "71610967"
  MONITOR_IMAGE: "vishal1007/monitor-github-action:latest"

# Build Stage
build:
  stage: build
  image: golang:${GO_VERSION}
  script:
    - 'echo "üèóÔ∏è Building application..."'
    - go mod download
    - go build -o app main.go
    - 'echo "‚úÖ Build completed"'
  artifacts:
    paths:
      - app
    expire_in: 1 hour
  only:
    - main
    - develop
    - /^feature\/.*$/
    - /^bugfix\/.*$/

# Test Stage
test:
  stage: test
  image: golang:${GO_VERSION}
  script:
    - 'echo "üß™ Running tests..."'
    - go mod download
    - go vet ./...
    - go test -v ./...
    - 'echo "‚úÖ All tests passed"'
  only:
    - main
    - develop
    - /^feature\/.*$/
    - /^bugfix\/.*$/

# Template for all deployment environments
.deploy_template: &deploy_template
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker info
  script:
    - 'echo "üöÄ Triggering GitHub Actions deployment to ${ENVIRONMENT^^}..."'
    - 'echo "üì° Triggering GitHub Workflow Dispatch via API..."'
    - |
      docker run --rm curlimages/curl:latest \
        -s -X POST "https://api.github.com/repos/${GITHUB_REPO}/actions/workflows/deploy.yml/dispatches" \
        -H "Authorization: Bearer ${GITHUB_TOKEN}" \
        -H "Accept: application/vnd.github+json" \
        -d "{\"ref\":\"${BRANCH_NAME}\", \"inputs\":{\"environment\":\"${ENVIRONMENT}\"}}"
    - 'echo "üñ•Ô∏è Monitoring GitHub Actions workflow for branch: ${BRANCH_NAME}"'
    - 'echo "üîç Starting real-time GitHub Actions monitoring using Docker image..."'
    - mkdir -p gitlab-logs
    - |
      docker run --rm \
        -e GITHUB_TOKEN="${GITHUB_TOKEN}" \
        -e GITHUB_REPO="${GITHUB_REPO}" \
        -e GITLAB_TOKEN="${GITLAB_TOKEN}" \
        -e GITLAB_PROJECT_ID="${GITLAB_PROJECT_ID}" \
        -e BRANCH_NAME="${BRANCH_NAME}" \
        -e ENVIRONMENT="${ENVIRONMENT}" \
        -e POLL_INTERVAL="10s" \
        -v "$(pwd)/gitlab-logs:/app/gitlab-logs" \
        ${MONITOR_IMAGE}
  artifacts:
    when: always
    paths:
      - gitlab-logs/
    expire_in: 1 week
  when: manual
  only:
    - main

# Manual Deploy: DEV
deploy-dev:
  stage: deploy-dev
  variables:
    ENVIRONMENT: "dev"
    BRANCH_NAME: "dev"
  <<: *deploy_template

# Manual Deploy: QA
deploy-qa:
  stage: deploy-qa
  variables:
    ENVIRONMENT: "qa"
    BRANCH_NAME: "qa"
  <<: *deploy_template

# Manual Deploy: PROD
deploy-prod:
  stage: deploy-prod
  variables:
    ENVIRONMENT: "prod"
    BRANCH_NAME: "main"
  <<: *deploy_template
  artifacts:
    when: always
    paths:
      - gitlab-logs/
    expire_in: 1 month

# Manual Deploy: NEXT
deploy-next:
  stage: deploy-next
  variables:
    ENVIRONMENT: "next"
    BRANCH_NAME: "next"
  <<: *deploy_template

# Optional: Cleanup job
cleanup:
  stage: .post
  image: alpine:latest
  script:
    - 'echo "üßπ Cleaning up temporary files..."'
    - rm -rf /tmp/github-monitor-*
  when: always
  allow_failure: true