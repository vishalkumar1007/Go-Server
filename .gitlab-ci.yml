stages:
  - build
  - test
  - monitor-github-actions

variables:
  GITHUB_REPO: "vishalkumar1007/Go-Server"
  GITLAB_PROJECT_ID: "71610967"

build-app:
  stage: build
  image: golang:1.21-alpine
  script:
    - echo "🏗️ Building Go application on GitLab..."
    - go mod download
    - go build -o app main.go
    - echo "✅ Build completed successfully"
  artifacts:
    paths:
      - app
    expire_in: 1 hour
  only:
    - main

test-app:
  stage: test
  image: golang:1.21-alpine
  script:
    - echo "🧪 Running Go tests on GitLab..."
    - go mod download
    - go test -v ./...
    - echo "✅ All tests passed"
  only:
    - main

monitor-github-actions:
  stage: monitor-github-actions
  image: golang:1.21-alpine
  variables:
    GITHUB_TOKEN: ${GITHUB_API_TOKEN}
    GITLAB_TOKEN: ${GITLAB_API_TOKEN}
    COMMIT_SHA: ${CI_COMMIT_SHA}
    GITHUB_REPO: "vishalkumar1007/Go-Server"
    GITLAB_PROJECT_ID: "71610967"
    POLL_INTERVAL: "10s"
  before_script:
    # Debug environment and permissions
    - echo "🔍 Debug Information:"
    - echo "Working directory: $(pwd)"
    - echo "User: $(whoami)"
    - echo "User ID: $(id)"
    - echo "Available space: $(df -h .)"
    - echo "Environment variables:"
    - echo "  GITHUB_REPO: ${GITHUB_REPO}"
    - echo "  GITLAB_PROJECT_ID: ${GITLAB_PROJECT_ID}"
    - echo "  COMMIT_SHA: ${CI_COMMIT_SHA}"
    - echo "  POLL_INTERVAL: ${POLL_INTERVAL}"
    - echo "Checking if tokens are set (length only for security):"
    - echo "  GITHUB_TOKEN length: ${#GITHUB_TOKEN}"
    - echo "  GITLAB_TOKEN length: ${#GITLAB_TOKEN}"
    
    # Create and test directory permissions
    - echo "📁 Testing directory creation and permissions:"
    - mkdir -p gitlab-logs
    - ls -la gitlab-logs/
    - touch gitlab-logs/test-file.txt
    - echo "test content" > gitlab-logs/test-file.txt
    - cat gitlab-logs/test-file.txt
    - rm gitlab-logs/test-file.txt
    - echo "✅ Directory and file operations work correctly"
    
    # Test Go compilation
    - echo "🔨 Testing Go compilation:"
    - cd monitor
    - go mod init github-actions-monitor || true
    - go mod tidy
    - go build -o ../gitlab-logs/github-monitor main.go
    - ls -la ../gitlab-logs/github-monitor
    - echo "✅ Go compilation successful"
    - cd ..
    
  script:
    - |
      echo "🚀 Starting GitHub Actions Real-Time Monitor from GitLab CI"
      echo "📁 Monitoring GitHub Repository: ${GITHUB_REPO}"
      echo "🔗 Commit SHA: ${CI_COMMIT_SHA}"
      echo "📍 This monitor runs on GitLab CI to track GitHub Actions"
      echo "👥 GitLab developers will see GitHub deployment status here"
      echo "=================================================="
      
      # Show initial directory state
      echo "📋 Initial directory contents:"
      ls -la gitlab-logs/
      
      echo "👁️ Starting real-time GitHub Actions monitoring..."
      echo "⏰ Will check GitHub Actions every 10 seconds"
      echo "📊 Logs will show live deployment progress"
      echo "--------------------------------------------------"
      
      # Run with detailed output
      ./gitlab-logs/github-monitor 2>&1 | tee -a gitlab-logs/monitor-output.log
      
      echo "=================================================="
      echo "📋 GitHub Actions Monitoring Complete!"
      echo "📄 Final directory contents:"
      ls -la gitlab-logs/
      
      echo "📄 Checking log files:"
      if [ -f "gitlab-logs/github-deployment.log" ]; then
        echo "✅ Main log file exists ($(wc -l < gitlab-logs/github-deployment.log) lines)"
        echo "📄 Last 10 lines of deployment log:"
        tail -10 gitlab-logs/github-deployment.log
      else
        echo "❌ Main log file not found"
      fi
      
      if [ -f "gitlab-logs/github-api-responses.log" ]; then
        echo "✅ API log file exists ($(wc -c < gitlab-logs/github-api-responses.log) bytes)"
      else
        echo "❌ API log file not found"
      fi
      
      if [ -f "gitlab-logs/monitor-output.log" ]; then
        echo "✅ Monitor output log exists ($(wc -l < gitlab-logs/monitor-output.log) lines)"
      else
        echo "❌ Monitor output log not found"
      fi
      
  artifacts:
    name: "github-actions-logs-${CI_COMMIT_SHORT_SHA}"
    paths:
      - gitlab-logs/
    reports:
      junit: gitlab-logs/*.xml
    expire_in: 30 days
    when: always
  timeout: 45m
  only:
    - main
  when: manual
  retry:
    max: 1
    when:
      - runner_system_failure
      - api_failure