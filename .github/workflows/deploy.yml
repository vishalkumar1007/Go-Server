# .github/workflows/deploy.yml
# Manual Multi-Environment Deployment Workflow

name: Multi-Environment Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod
          - next

jobs:
  # Set deployment parameters based on environment
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      deploy-timeout: ${{ steps.set-env.outputs.deploy-timeout }}
    steps:
      - name: Set environment & timeout
        id: set-env
        run: |
          ENV="${{ inputs.environment }}"

          case "$ENV" in
            prod) TIMEOUT="20" ;;
            qa) TIMEOUT="15" ;;
            *) TIMEOUT="10" ;;
          esac

          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "deploy-timeout=$TIMEOUT" >> $GITHUB_OUTPUT
          echo "üéØ Environment: $ENV"
          echo "‚è±Ô∏è Timeout: ${TIMEOUT} minutes"

  # Deploy to Development
  deploy-dev:
    if: needs.setup.outputs.environment == 'dev'
    needs: setup
    runs-on: ubuntu-latest
    environment: development
    timeout-minutes: ${{ fromJson(needs.setup.outputs.deploy-timeout) }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build & Test (DEV)
        run: |
          go mod download
          go build -o app main.go
          go test -v ./...

      - name: Deploy to DEV
        run: |
          echo "üöÄ Deploying to DEV environment..."
          sleep 30
          echo "‚úÖ DEV deployment completed."

  # Deploy to QA
  deploy-qa:
    if: needs.setup.outputs.environment == 'qa'
    needs: setup
    runs-on: ubuntu-latest
    environment: qa
    timeout-minutes: ${{ fromJson(needs.setup.outputs.deploy-timeout) }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build & Test (QA)
        run: |
          go mod download
          go build -o app main.go
          go test -v ./...

      - name: Deploy to QA
        run: |
          echo "üöÄ Deploying to QA environment..."
          sleep 45
          echo "‚úÖ QA deployment completed."

  # Deploy to Production
  deploy-prod:
    if: needs.setup.outputs.environment == 'prod'
    needs: setup
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: ${{ fromJson(needs.setup.outputs.deploy-timeout) }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build & Test (PROD)
        run: |
          go mod download
          go build -o app main.go
          go test -v ./...

      - name: Deploy to PROD
        run: |
          echo "üöÄ Deploying to PRODUCTION..."
          sleep 60
          echo "‚úÖ Production deployment successful."

  # Deploy to NEXT/Staging
  deploy-next:
    if: needs.setup.outputs.environment == 'next'
    needs: setup
    runs-on: ubuntu-latest
    environment: staging
    timeout-minutes: ${{ fromJson(needs.setup.outputs.deploy-timeout) }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build & Test (NEXT)
        run: |
          go mod download
          go build -o app main.go
          go test -v ./...

      - name: Deploy to NEXT
        run: |
          echo "üöÄ Deploying to NEXT environment..."
          sleep 45
          echo "‚úÖ NEXT deployment completed."

  # Deployment Summary
  summary:
    if: always()
    needs: [setup, deploy-dev, deploy-qa, deploy-prod, deploy-next]
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "üìä Deployment Complete"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "‚úÖ All done!"
